"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./index"));

var _createFileContent = _interopRequireDefault(require("./create-file-content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

jest.mock('./create-file-content');
var defaultProps = {
  onClick: jest.fn(),
  downloadData: {}
};
describe('tests for <DownloadButton> container', function () {
  beforeEach(function () {
    jest.resetAllMocks();
  });
  it('should renders one child component', function () {
    var component = (0, _enzyme.shallow)(_react.default.createElement(_index.default, defaultProps, _react.default.createElement("span", null, "hello")));
    expect(component.find('button').length).toEqual(0);
    expect(component.find('span').length).toEqual(1);
    expect(component.find('a').length).toEqual(0);
  });
  it('should renders without child component', function () {
    var props = _objectSpread({}, defaultProps, {
      downloadData: {
        fileName: ''
      }
    });

    var component = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    expect(component.find('button').length).toEqual(1);
    expect(component.find('a').length).toEqual(0);
    component.find('button').simulate('click');
    expect(defaultProps.onClick).toBeCalled();
  });
  it('Should simulate href click when downloadData are specified', function () {
    _createFileContent.default.mockImplementation(function () {
      return 'fakeHref';
    });

    var downloadData = {
      mime: 'fakeMime',
      fileName: 'fakeFile',
      contentBase64: 'fakeContent'
    };

    var props = _objectSpread({}, defaultProps, {
      downloadData: downloadData
    });

    var component = (0, _enzyme.render)(_react.default.createElement(_index.default, props));
    expect(component.find('a').length).toEqual(1);
    expect(component.find('a')[0].attribs.href).toEqual('fakeHref');
  });
  it('Should map nested component onClick', function () {
    var component = (0, _enzyme.shallow)(_react.default.createElement(_index.default, defaultProps, _react.default.createElement("input", {
      type: "submit"
    })));
    component.find('input').simulate('click');
    expect(defaultProps.onClick).toBeCalled();
  });
  it('Should not be clickeable if disabled', function () {
    var props = _objectSpread({}, defaultProps, {
      disabled: true
    });

    var component = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    expect(component.html()).toContain('disabled');
    component.find('button').simulate('click');
    expect(defaultProps.onClick).not.toBeCalled();
  });
});